// import("types.nools");

// Math Helpers
function gcd(o, p)
{
    if (o < p) {
        let tmp = o;
        o = p;
        p = tmp;
    }
    var r;
    while (p >= 1) {
        r = o%p;
        o = p;
        p = r
    }    
    return o;
}

function lcm(m, n)
{
    return ((m*n)/gcd(m, n));
}


function getSkillIndex(skillName, skills) {
    let res = -1;
    skills.forEach((skill, index) => {
        if (skill.getSkillName() == skillName) {
            console.log("Got skill index: " + index);
            res = index;
        }
    });
    return res;
}
// Able to direclty compare fractions
function canCompare(n1, d1, n2, d2) {
    if (n1 === n2 || d1 === d2 || (n1/d1 < 1 && n2/d2 > 1) || (n1/d1 > 1 && n2/d2 < 1)) {
        return true;
    } else {
        return false;
    }
}

// Shuffles array in-place
function shuffle(a) {
    for (let i = a.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [a[i], a[j]] = [a[j], a[i]];
    }
}
// helper to reveal correct version of step 2
function revealStepTwo(problem) {
    if (problem.step2Version === "practice") {
        assert(new TPA("step_2_grouped_practice", "SetVisible", true));
    } else {
        assert(new TPA("step_2_worked", "SetVisible", true));
        assert(new TPA("step_2_reason_container", "SetVisible", true));
        const txt = "We can use " + problem.commonDen + " as a common denominator.";
        assert(new TPA("step_2_worked", "UpdateTextField", txt));
    }
}
function revealStepThree(problem) {
    const fraction1Conversion = parseInt(problem.commonDen/problem.den1);
    const fraction2Conversion = parseInt(problem.commonDen/problem.den2);

    // Create answer choices and shuffle them
    const correctOption = `Multiply the top and bottom of Fraction 1 by ${fraction1Conversion} and multiply the top and bottom of Fraction 2 by ${fraction2Conversion}`;
    const onlyTops = `Multiply the top of Fraction 1 by ${fraction1Conversion} and the top of Fraction 2 by ${fraction2Conversion}`;
    const onlyBottoms = `Multiply the bottom of Fraction 1 by ${fraction1Conversion} and the bottom of Fraction 2 by ${fraction2Conversion}`;
    const reversedOptions = `Multiply the top and bottom of Fraction 1 by ${fraction2Conversion} and multiply the top and bottom of Fraction 2 by ${fraction1Conversion}`;
    let options = [correctOption, onlyTops, onlyBottoms, reversedOptions];
    shuffle(options);
    const correctIndex = options.indexOf(correctOption);
    modify(problem, "step3CorrectOptionIndex", correctIndex);
    modify(problem, "step3Options", options);
    // Write options to interface
    options.forEach((option, index) => {
        assert(new TPA(`step_3_option${index+1}`, "UpdateTextField", option));
    });

    assert(new TPA("step_3_group", "SetVisible", true));
    assert(new TPA("step_3_practice", "SetVisible", true));
}

// Check if student entered a valid common denominator
function validateCommonDenominator(studentSAI, tutorSAI) 
{
    console.log("validateCommonDenominator");
    console.log(parseFloat(studentSAI.input)%parseFloat(tutorSAI.input) == 0);

    return (parseFloat(studentSAI.input)%parseFloat(tutorSAI.input) == 0);
}

rule bootstrap {
    when {
        b: Boolean b === true from true;
    }
    then {


            // Fill in fractions for comparision
            assert(new TPA("num1", "UpdateTextArea", num1));
            assert(new TPA("den1", "UpdateTextArea", den1));
            assert(new TPA("num2", "UpdateTextArea", num2));
            assert(new TPA("den2", "UpdateTextArea", den2));


            // Create Problem
            assert(new Problem(num1, den1, num2, den2));

            setProblemAttribute("use_backtracking", true);
            halt();        

    }
}

rule loadSkills {
    when {
            p: Problem p.goal === "loadSkills";
    }
    then {


            if (checkSAI({selection: "don't_care", action: "don't_care", input: "don't_care"})) {
                let skills = CTAT.ToolTutor.tutor.getProblemSummary().getSkills().getAllSkills();
                console.log("Loaded skills:");

                console.log(skills);
                skills.forEach(skill => {
                    console.log(skill.getSkillName());
                });

                // Determine step 1 version based on student skill
                let s1_skill = 0;
               if(p.den1 == p.den2)
               {
                    var s1_skill_index = getSkillIndex("step1Reason_sameDenominator 1.1", skills);
                    console.log("same den skill index: " + s1_skill_index);
                    s1_skill = skills[s1_skill_index].getPKnown();
               }
               else if(p.num1 == p.num2)
               {    console.log(getSkillIndex("step1Reason_sameNumerator 1.1", skills));
                       var s1_skill_index = getSkillIndex("step1Reason_sameNumerator 1.1", skills);
                       console.log("same num skill index: " + s1_skill_index);
                     s1_skill = skills[s1_skill_index].getPKnown();
               }
               else if( (p.num1/p.den1 < 1 && p.num2/p.den2 > 1) || (p.num1/p.den1 > 1 && p.num2/p.den2 < 1))
               {
                       var s1_skill_index = getSkillIndex("step1Reason_ComparetoOne 1.1", skills);
                       console.log("compare to 1 skill index: " + s1_skill_index);
                    s1_skill = skills[s1_skill_index].getPKnown();
               }
                else 
                {
                    var s1_skill_index = getSkillIndex("step1Reason_unlikeFractions 1.1", skills);    
                    console.log("unlike fractions skill index: " + s1_skill_index);
                    s1_skill = skills[s1_skill_index].getPKnown();
                }
                if (s1_skill < .7)
                {
                    assert(new TPA("step_1_worked", "SetVisible", true));
                    assert(new TPA("step_1_reason_container", "SetVisible", true));
                    // Reveal step 1 worked example version
                    let workedExampleText = "";
                    if (canCompare(num1, den1, num2, den2)) {
                        workedExampleText = "We can compare these two fractions without writing them differently. Do you know why?";
                    } else {
                        workedExampleText = "We can't compare these two fractions without making some changes first. Do you know why?";
                    }
                    modify(p, "step1Version", "worked");
                    assert(new TPA("step_1_worked", "UpdateTextField", workedExampleText));


                }
                else
                {
                     assert(new TPA("step_1_practice_container", "SetVisible", true));
                     modify(p, "step1Version", "practice");

                }


                // Determine step 2 version based on student skill
                let lowerS2Skill = 0;
                    // Identify which reasoning skill is lower for student (using LCM or using product)
                s5_skill_index_lcm = getSkillIndex("step2Reason_LCM 1.1", skills);
                s5_skill_index_product = getSkillIndex("step2Reason_Product 1.1", skills);
                if (skills[s5_skill_index_lcm].getPKnown() <= skills[s5_skill_index_product].getPKnown()) { //Worse at identifying LCM
                    lowerS2Skill = skills[s5_skill_index_lcm].getPKnown();
                    modify(p, "commonDen", lcm(p.den1, p.den2));
                    modify(p, "commonDenStrat", "LCM");
                } else { //Worse at identifying product
                    lowerS2Skill = skills[s5_skill_index_product].getPKnown();
                    modify(p, "commonDen", p.den1*p.den2);
                    modify(p, "commonDenStrat", "product");
                }
                if (lowerS2Skill < .70) {
                    modify(p, "step2Version", "worked");
                } else {
                    modify(p, "step2Version", "practice");

                    modify(p, "commonDen", null);
                }

                modify(p, "goal", "step1");
                halt();
            }

    }
}

////////////
// Step 1 //
////////////
rule step1ReasonSameNum {
    when {
        p: Problem p.goal === "step1" && p.num1 == p.num2 && p.step1Version == "worked";
    }
    then {
        if (checkSAI({selection: "step_1_reason", action: "UpdateRadioButton", input: "step_1_reason\n-option-0: The numerators are the same."})) {
            modify(p, "goal", "step5");
            setSuccessOrBugMsg("That's right. The two tops (numerators) are the same and hence we can compare them as is. ");
            assert(new TPA("step_5_practice_container", "SetVisible", true));
            halt();
        } else {
            setSuccessOrBugMsg("Are you sure? Check if the tops(numerators) are the same. "); 

            backtrack();
        }
    }
}

rule step1ReasonSameDen {
    when {
        p: Problem p.goal === "step1" && p.den1 == p.den2 && p.step1Version == "worked";
    }
    then {
        if (checkSAI({selection: "step_1_reason", action: "UpdateRadioButton", input: "step_1_reason\n-option-1: The denominators are the same."})) {
            modify(p, "goal", "step5");
            setSuccessOrBugMsg("That's right. The two bottoms (denominators) are the same and hence we can compare them as is. "); 

            assert(new TPA("step_5_practice_container", "SetVisible", true));

            halt();
        } else {
            setSuccessOrBugMsg("Are you sure? Check if the tops(numerators) are the same. "); 
            backtrack();
        }
    }
}

rule step1ReasonCompareToOne {
    when {
        p: Problem p.goal === "step1" && ( (p.num1/p.den1 < 1 && p.num2/p.den2 > 1) || (p.num1/p.den1 > 1 && p.num2/p.den2 < 1) ) && p.step1Version == "worked";
    }
    then {
        if (checkSAI({selection: "step_1_reason", action: "UpdateRadioButton", input: "step_1_reason\n-option-2: One of the fractions is less than 1 and the other is greater than 1."})) {
            modify(p, "goal", "step5");
            setSuccessOrBugMsg("That's right. Since one of the fractions is lesser than one and the other is greater than one. "); 
            assert(new TPA("step_5_practice_container", "SetVisible", true));
            halt();
        } else {
            setSuccessOrBugMsg("Not really. Please check if one of the two fractions is lesser than one and another is greater than one."); 
            backtrack();
        }
    }
}

rule step1ReasonUnlikeFractions {
    when {
        p: Problem p.goal === "step1" && !canCompare(p.num1, p.den1, p.num2, p.den2) && p.step1Version == "worked";
    }
    then {
        if (checkSAI({selection: "step_1_reason", action: "UpdateRadioButton", input: "step_1_reason\n-option-3: None of the above; now we need a common denominator"})) {
            modify(p, "goal", "step2");
            setSuccessOrBugMsg("That's right. Since both of them can't be compared we will need a common denominator. "); 
            revealStepTwo(p);
            halt();
        } else {
            setSuccessOrBugMsg("Are you sure that the two can be compared? Do they have the same tops (numerators) or same bottoms(denominators) or is one of the fractions greater than one?"); 
            backtrack();
        }
    }
}


rule step1practice
{
    when 
    {
      p : Problem p.goal === "step1" && p.step1Version == "practice";
    }
    then
    {
        const compare = canCompare(p.num1, p.den1, p.num2, p.den2);
        if (compare) {
            if (checkSAI({selection: "step_1_practice", action: "UpdateRadioButton", input: "step_1_practice-option-0: Yes"})) {
                modify(p, "goal", "step5");
                setSuccessOrBugMsg("That's right. We can compare them as is."); 
                assert(new TPA("step_5_practice_container", "SetVisible", true));
                halt();
            } else {
                setSuccessOrBugMsg("Are you sure that we cannot compare them as is ? Please check if the tops(numerators) are same or the bottoms (denominators) are the same or whether one of the fractions is greater than one and the other is lesser than one."); 
                backtrack();
            }
        } else {
            if (checkSAI({selection: "step_1_practice", action: "UpdateRadioButton", input: "step_1_practice-option-1: No"})) {
                modify(p, "goal", "step2");
                setSuccessOrBugMsg("That's right, we cannot compare them as is. "); 
                revealStepTwo(p);
                
                halt();
            } else {
                setSuccessOrBugMsg("Are you sure that we can compare them as is? Please check if the tops(numerators) are same or the bottoms (denominators) are the same or whether one of the fractions is greater than one and the other is lesser than one."); 
                backtrack();
            }
        }
    }
}

/////////////
// Step 2  //
/////////////
rule step2ReasonProduct {
    when
    {
      p: Problem p.goal == "step2" &&  p.step2Version == "worked" && p.commonDenStrat == "product";
    }
    then
    {
        if (checkSAI({selection: "step_2_reason", action: "UpdateRadioButton", input: "step_2_reason-option-1: It is the product of the two numbers"}))
        {
            // assert(new TPA("step_3_group", "SetVisible", true));
            // assert(new TPA("step_3_practice", "SetVisible", true));
            // assert(new TPA("step_3_option1", "UpdateTextField", "<html><math display = 'block'>  <mrow>   <mfrac><mn>5</mn>     <mn>6</mn>   </mfrac> </mrow></math></html>"));
            setSuccessOrBugMsg("That's right, the common denominator is the product of the two bottoms (denominators) "); 

            revealStepThree(p);
            modify(p, "goal", "step3");
            halt();
        }
        else
        {
            setSuccessOrBugMsg("Are you sure? Do you think it could be that the common denominator is the product of the two denominators. "); 

            backtrack();
        }
    }
}

rule step2ReasonLCM {
    when {
        p: Problem p.goal == "step2" && p.step2Version == "worked" && p.commonDenStrat == "LCM";
    }
    then 
    {
        if (checkSAI({selection: "step_2_reason", action: "UpdateRadioButton", input: "step_2_reason-option-0: It is the least common multiple(L.C.M.) of the two denominators."})) 
        {
            // assert(new TPA("step_3_group", "SetVisible", true));
            // assert(new TPA("step_3_practice", "SetVisible", true));
            // assert(new TPA("step_3_option1", "UpdateTextField", "<html><math display = 'block'>  <mrow>   <mfrac><mn>5</mn>     <mn>6</mn>   </mfrac> </mrow></math></html>"));
            setSuccessOrBugMsg("That's right, the common denominator is the L.C.M. (least common multiple) of the two denominators. "); 
            revealStepThree(p);
            modify(p, "goal", "step3");
            halt();
        }
        else
        {
            setSuccessOrBugMsg("Are you sure? Do you think the common denominator is the l.c.m. of the two denominators."); 
            backtrack();
        }
    }
}

rule step2Practice
{
    when 
    {
      p : Problem p.goal == "step2" && p.step2Version == "practice";
    }
    then
    {        
        let tutorSAI = lcm(p.den1,p.den2);
        if (checkSAI({selection: "step_2_practice_part2", action: "UpdateTextArea", input: tutorSAI}, validateCommonDenominator)) 
        {
            // assert(new TPA("step_3_group", "SetVisible", true));
            // assert(new TPA("step_3_practice", "SetVisible", true));
            // assert(new TPA("step_3_option1", "UpdateTextField", "<html><math display = 'block'>  <mrow>   <mfrac><mn>5</mn>     <mn>6</mn>   </mfrac> </mrow></math></html>"));
            setSuccessOrBugMsg("That's correct. That's the correct common denominator. ");
            revealStepThree(p);
            modify(p, "goal", "step3");
            halt();
        }                                                    
        else
        {
            setSuccessOrBugMsg("Are you sure that's the common denominator. It might be the l.c.m (least common multiple) of the two denominators. "); 
            backtrack();
        }
    }
}

////////////
// Step 3 //
////////////
rule step_3_practice {
    when {
        p: Problem p.goal == "step3";
    }
    then {
        const correctInput = `step_3_radio${p.step3CorrectOptionIndex + 1}: `;
        if (checkSAI({selection: "radioButtonGroup", action: "UpdateRadioButton", input: correctInput})) {
            setSuccessOrBugMsg("That's correct. You get the correct fractions by multiplying the tops and bottoms of both the fractions by a number which helps us obtain the common denominator in the fractions."); 
            assert(new TPA("step_4_group", "SetVisible", true));

            modify(p, "goal", "step4");
            halt();
        } else {
            setSuccessOrBugMsg("Are you sure? You need to multiply the tops and the bottoms by the same number.  "); 

            backtrack();
        }
    }
}

////////////
// Step 4 //
////////////
rule step_4_den {
    when {
        p: Problem p.goal == "step4";
        sv: StudentValues sv.selection == "den3" || sv.selection == "den4";
    }
    then {
        if (checkSAI({selection: sv.selection, action: "UpdateTextArea", input: p.commonDen})) {
            modify(p, sv.selection, sv.input);
            setSuccessOrBugMsg("That's right, the denominators are equal to the common denominator. ");
            if (p.num3 && p.den3 && p.num4 && p.den4) {
                modify(p, "goal", "step5");
                assert(new TPA("step_5_practice_container", "SetVisible", true));
            }
            halt();
        } else {
            setSuccessOrBugMsg("Are you sure? The denominator needs to be equal to the common denominator. "); 
            backtrack();
        }
    }
}
rule step_4_num {
    when {
        p: Problem p.goal == "step4";
        sv: StudentValues sv.selection == "num3" || sv.selection == "num4";
    }
    then {
        let correctInput = null;
        switch (sv.selection) {
            case "num3":
                correctInput = p.num1*p.commonDen/p.den1;
                break;
            case "num4":
                correctInput = p.num2*p.commonDen/p.den2;
                break;
        }
        if (checkSAI({selection: sv.selection, action: "UpdateTextArea", input: correctInput})) {
            modify(p, sv.selection, sv.input);
            setSuccessOrBugMsg("That's right, the numerators you entered are correct. "); 
            if (p.num3 && p.den3 && p.num4 && p.den4) {
                modify(p, "goal", "step5");
                assert(new TPA("step_5_practice_container", "SetVisible", true));
            }
            halt();
        } else {
            setSuccessOrBugMsg("Are you sure the numerators are entered correctly? Please look at the last step's correct answer, apply the step to the fractions and try again.  "); 

            backtrack();
        }
    }
}
////////////
// Step 5 //
////////////
rule step5Practice {
    when {
        p: Problem p.goal == "step5";
    }
    then {
        let correctAnswer = null;
        if (p.num1/p.den1 > p.num2/p.den2) {
            correctAnswer = "step_5_practice-option-0: Fraction 1";
        } else {
            correctAnswer = "step_5_practice-option-1: Fraction 2";
        }
        if (checkSAI({selection: "step_5_practice", action: "UpdateRadioButton", input: correctAnswer})) {
            modify(p, "goal", "justifyComparison");
            setSuccessOrBugMsg("Yay! That's right. You picked the right fraction as the greater one.  "); 


            assert(new TPA("comparison_reason", "SetVisible", true));
            assert(new TPA("ctatdiv112", "setEnabled", "true"));
            assert(new TPA("ctatdiv106", "setEnabled", "true"));
            assert(new TPA("step_5_option3", "setEnabled", "true"));
            var frac1Name = "";
            var frac2Name = "";
            if (canCompare(p.num1, p.den1, p.num2, p.den2)) {
                frac1Name = `${p.num1}/${p.den1}`;
                frac2Name = `${p.num2}/${p.den2}`;
            } else {
                frac1Name = `${p.num3}/${p.den3}`;
                frac2Name = `${p.num4}/${p.den4}`;
            }
            if (p.num1/p.den1 > p.num2/p.den2) {
                assert(new TPA("ctatdiv114", "UpdateTextArea", frac1Name));
                assert(new TPA("ctatdiv102", "UpdateTextArea", frac2Name + "?"));
            } else {
                assert(new TPA("ctatdiv114", "UpdateTextArea", frac2Name));
                assert(new TPA("ctatdiv102", "UpdateTextArea", frac1Name + "?"));
            }

            halt();
        } else {
            setSuccessOrBugMsg("Are you sure that the fraction you picked is greater? Please try again.  "); 
            backtrack();
        }
    }
}

rule justifyComparison {
    when {
        p: Problem p.goal === "justifyComparison" && (p.den1 == p.den2 || p.num1 == p.num2 || p.den3 == p.den4 || p.num3 == p.num4);
    }
    then {
        let val = "";
        if (canCompare(p.num1, p.den1, p.num2, p.den2)) {
            if (p.den1 == p.den2) {
                val = "ctatdiv106: ";
            } else if (p.num1 == p.num2) {
                val = "ctatdiv112: ";
            }
        } else {
            if (p.den3 == p.den4) {
                val = "ctatdiv106: ";
            } else if (p.num3 == p.num4) {
                val = "ctatdiv112: ";   
            }
        }
        if (checkSAI({selection: "radioButtonGroup", action: "UpdateRadioButton", input: val})) {
            modify(p, "goal", "done");
            setSuccessOrBugMsg("Way to go! Hit done to complete the problem");
            // If we can directly compare, show fraction bars with fractions written as-is
            assert(new TPA("fractionBar1", "SetVisible", true));
            if (canCompare(p.num1, p.den1, p.num2, p.den2)) {
                assert(new TPA("fractionBar1Label", "UpdateTextField", `Fraction 1: ${p.num1}/${p.den1}`));
                var bar1String = `${p.num1}/${p.den1}`;
                assert(new TPA("fractionBar1", "SetPieces", bar1String));
                assert(new TPA("fractionBar1", "set_denominator", 1));
                assert(new TPA("fractionBar1", "set_denominator", p.den1));

                var bar2String = `${p.num2}/${p.den2}`;
                assert(new TPA("fractionBar2", "SetVisible", true));
                assert(new TPA("fractionBar2", "SetPieces", bar2String));
                assert(new TPA("fractionBar2", "set_denominator", 1));
                assert(new TPA("fractionBar2", "set_denominator", p.den2));
                assert(new TPA("fractionBar2Label", "UpdateTextField", `Fraction 2: ${p.num2}/${p.den2}`));
            } else {            
                assert(new TPA("fractionBar1Label", "UpdateTextField", `Fraction 1: ${p.num1}/${p.den1} = ${p.num3}/${p.den3}`));
                // Configure fraction bar 1
                var bar1String = `${p.num1}/${p.den1}`;
                assert(new TPA("fractionBar1", "SetPieces", bar1String));
                assert(new TPA("fractionBar1", "set_denominator", p.commonDen*2));
                assert(new TPA("fractionBar1", "set_denominator", p.commonDen));

                assert(new TPA("fractionBar2", "SetVisible", true));
                assert(new TPA("fractionBar2Label", "UpdateTextField", `Fraction 2: ${p.num2}/${p.den2} = ${p.num4}/${p.den4}`));
                // Configure fraction bar 2
                var bar2String = `${p.num2}/${p.den2}`;
                assert(new TPA("fractionBar2", "SetPieces", bar2String));
                assert(new TPA("fractionBar2", "set_denominator", p.commonDen*2));
                assert(new TPA("fractionBar2", "set_denominator", p.commonDen));

            }

            halt();
        } else {
            backtrack();
        }
    }
}

rule justifyComparisonUsingCompareToOne {
    when {
        p: Problem p.goal == "justifyComparison" && (p.num1/p.den1 < 1 && p.num2/p.den2 > 1) || (p.num1/p.den1 > 1 && p.num2/p.den2 < 1);
    }
    then {
        if (checkSAI({selection: "radioButtonGroup", action: "UpdateRadioButton", input: "step_5_option3: "})) {
            // If we can directly compare, show fraction bars with fractions written as-is
            assert(new TPA("fractionBar1", "SetVisible", true));
            if (canCompare(p.num1, p.den1, p.num2, p.den2)) {
                assert(new TPA("fractionBar1Label", "UpdateTextField", `Fraction 1: ${p.num1}/${p.den1}`));
                var bar1String = `${p.num1}/${p.den1}`;
                assert(new TPA("fractionBar1", "SetPieces", bar1String));
                assert(new TPA("fractionBar1", "set_denominator", 1));
                assert(new TPA("fractionBar1", "set_denominator", p.den1));

                var bar2String = `${p.num2}/${p.den2}`;
                assert(new TPA("fractionBar2", "SetVisible", true));
                assert(new TPA("fractionBar2", "SetPieces", bar2String));
                assert(new TPA("fractionBar2", "set_denominator", 1));
                assert(new TPA("fractionBar2", "set_denominator", p.den2));
                assert(new TPA("fractionBar2Label", "UpdateTextField", `Fraction 2: ${p.num2}/${p.den2}`));
            } else {            
                assert(new TPA("fractionBar1Label", "UpdateTextField", `Fraction 1: ${p.num1}/${p.den1} = ${p.num3}/${p.den3}`));
                // Configure fraction bar 1
                var bar1String = `${p.num1}/${p.den1}`;
                assert(new TPA("fractionBar1", "SetPieces", bar1String));
                assert(new TPA("fractionBar1", "set_denominator", p.commonDen*2));
                assert(new TPA("fractionBar1", "set_denominator", p.commonDen));

                assert(new TPA("fractionBar2", "SetVisible", true));
                assert(new TPA("fractionBar2Label", "UpdateTextField", `Fraction 2: ${p.num2}/${p.den2} = ${p.num4}/${p.den4}`));
                // Configure fraction bar 2
                var bar2String = `${p.num2}/${p.den2}`;
                assert(new TPA("fractionBar2", "SetPieces", bar2String));
                assert(new TPA("fractionBar2", "set_denominator", p.commonDen*2));
                assert(new TPA("fractionBar2", "set_denominator", p.commonDen));

            }

            modify(p, "goal", "done");
            halt();
        } else {
            backtrack();
        }

    }
}


//////////
// Done //
//////////
rule done {
    when {
        p: Problem p.goal == "done";
    } then {
        if (checkSAI({selection: "done", action: "ButtonPressed", input: "don't_care"})) {
            halt();
        }
        else {
            backtrack();
        }
    }
}
